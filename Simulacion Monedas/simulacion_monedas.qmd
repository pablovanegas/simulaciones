---
title: "simulacion_monedas"
format: revealjs
editor: visual
---


```{r}
```



```{r}
# Instalar y cargar dplyr si no lo tienes instalado
# install.packages("dplyr")
library(dplyr)

# Crear el data frame con tus datos
monedas <- data.frame(
  DENOMINACION = c("50a", "50a", "50a", "50a", "50a", 
                   "100a", "100a", "100a", "100a", "100a", 
                   "200a", "200a", "200a", "200a", "200a",
                   "500", "500", "500", "500", "500", 
                   "1000", "1000", "1000", "1000", "1000", 
                   "50", "50", "50", "50", "50", 
                   "100", "100", "100", "100", "100", 
                   "200", "200", "200", "200", "200"),
  PESO_MONEDA = c(4, 4, 5, 4, 4, 
                  5, 5, 5, 5, 5, 
                  6, 6, 6, 6, 6, 
                  7, 7, 7, 7, 7, 
                  11, 12, 11, 12, 11, 
                  2, 2, 2, 2, 2, 
                  4, 3, 3, 3, 3, 
                  5, 4, 4, 4, 5)
)

# Filtrar las monedas que no contienen "a" en la denominación
monedas_relevantes <- monedas %>%
  filter(!grepl("a", DENOMINACION))

# Ver las monedas relevantes
print(monedas_relevantes)

```


```{r}
# medidas estadisticas de cada grupo de monedas

medidas <- monedas %>%
  group_by(DENOMINACION) %>%
  summarise(
    media = mean(PESO_MONEDA),
    mediana = median(PESO_MONEDA),
    desviacion = sd(PESO_MONEDA),
    minimo = min(PESO_MONEDA),
    maximo = max(PESO_MONEDA)
  )



```

# Simulacion de monedas 

```{r}
# Instalar y cargar dplyr si no lo tienes instalado
# install.packages("dplyr")
library(dplyr)

# Crear el data frame con las medidas obtenidas
medidas <- monedas %>%
  group_by(DENOMINACION) %>%
  summarise(
    media = mean(PESO_MONEDA),
    desviacion = sd(PESO_MONEDA)
  )

  
```
# Simulaciones de pesos de monedas

```{r}
# Definir el número de simulaciones por denominación
n_simulaciones <- 100 

# Crear una lista vacía para almacenar los resultados de las simulaciones
simulaciones_lista <- list()

# Realizar simulaciones normales para cada denominación
set.seed(110100100)  # Para reproducibilidad
for(i in 1:nrow(medidas)) {
  simulaciones_lista[[i]] <- data.frame(
    DENOMINACION = medidas$DENOMINACION[i],
    PESO_SIMULADO = rnorm(n = n_simulaciones, 
                          mean = medidas$media[i], 
                          sd = medidas$desviacion[i])
  )
}

# Convertir la lista en un solo data frame
simulaciones_normales <- do.call(rbind, simulaciones_lista)

# Mostrar algunas de las simulaciones
head(simulaciones_normales)
```



```{r}

# separando las simulaciones por denominación
simulaciones_normales <- simulaciones_normales %>%
  group_by(DENOMINACION) %>%
  mutate(simulacion = row_number())

```

# visualizacion de las simulaciones 
```{r}
library(ggplot2)
# Visualización de las simulaciones usando ggplot2
ggplot(simulaciones_normales, aes(x = PESO_SIMULADO, color = DENOMINACION)) +
  geom_density(size = 1.2) +   # Gráfico de densidad
  labs(
    title = "Distribución de los Pesos Simulados por Denominación",
    x = "Peso Simulado",
    y = "Densidad"
  ) +
  theme_minimal() +            # Tema más limpio
  theme(legend.title = element_blank())  # Eliminar título de la leyenda
```

```{r}
# Cargar dplyr si no está cargado
library(dplyr)


# Crear un campo de valor por unidad de peso (supongamos que el valor es numérico y coincide con la denominación)
monedas_relevantes <- monedas_relevantes %>%
  mutate(valor_peso = as.numeric(DENOMINACION) / PESO_MONEDA) %>%
  arrange(desc(valor_peso))  # Ordenar por mayor valor/peso

# Paso 2: Definir el peso máximo (en gramos)
peso_maximo <- 1000

# Inicializar variables
peso_total <- 0
valor_total <- 0
seleccion_monedas <- data.frame(DENOMINACION = character(), PESO_MONEDA = numeric(), CANTIDAD = numeric())


```


```{r}
# Algoritmo greedy para seleccionar monedas
for (i in 1:nrow(monedas_relevantes)) {
  if (peso_total >= peso_maximo) break
  
  # Número máximo de monedas que caben del tipo actual
  max_monedas <- floor((peso_maximo - peso_total) / monedas_relevantes$PESO_MONEDA[i])
  
  if (max_monedas > 0) {
    # Actualizar peso y valor total
    peso_total <- peso_total + max_monedas * monedas_relevantes$PESO_MONEDA[i]
    valor_total <- valor_total + max_monedas * as.numeric(monedas_relevantes$DENOMINACION[i])
    
    # Almacenar la selección de monedas
    seleccion_monedas <- rbind(seleccion_monedas, data.frame(
      DENOMINACION = monedas_relevantes$DENOMINACION[i],
      PESO_MONEDA = monedas_relevantes$PESO_MONEDA[i],
      CANTIDAD = max_monedas
    ))
  }
}
```

# Resultados de la combinacion de monedas usando el metodo greedy

```{r}
# Mostrar los resultados
print(paste("Valor total de monedas:", valor_total))
print(paste("Peso total de monedas:", peso_total))
print("Combinación de monedas seleccionadas:")
print(seleccion_monedas)
```


```{r}
# Cargar librerías necesarias
library(dplyr)

# Crear el data frame con las medidas obtenidas
medidas <- monedas_relevantes %>%
  group_by(DENOMINACION) %>%
  summarise(
    media = mean(PESO_MONEDA),
    desviacion = sd(PESO_MONEDA)
  )

# Definir el número de simulaciones por denominación
n_simulaciones <- 100 

# Crear una lista vacía para almacenar los resultados de las simulaciones
simulaciones_lista <- list()

# Realizar simulaciones normales para cada denominación
set.seed(110100100)  # Para reproducibilidad
for(i in 1:nrow(medidas)) {
  simulaciones_lista[[i]] <- data.frame(
    DENOMINACION = medidas$DENOMINACION[i],
    PESO_SIMULADO = rnorm(n = n_simulaciones, 
                          mean = medidas$media[i], 
                          sd = medidas$desviacion[i])
  )
}

# Convertir la lista en un solo data frame
simulaciones_normales <- do.call(rbind, simulaciones_lista)

# Mostrar algunas de las simulaciones
head(simulaciones_normales)

```

```{r}
# Crear un data frame con la información de las monedas relevantes y sus simulaciones
monedas_simuladas <- simulaciones_normales %>%
  group_by(DENOMINACION) %>%
  summarise(
    PESO_MEDIO = mean(PESO_SIMULADO),
    VALOR_TOTAL = as.numeric(DENOMINACION)  # Supongamos que el valor es igual a la denominación
  )

# Agregar las monedas simuladas a la base de datos relevante
monedas_simuladas <- monedas_simuladas %>%
  arrange(desc(VALOR_TOTAL / PESO_MEDIO))  # Ordenar por valor/ peso

```

# Algoritmo

```{r}
# Función para resolver el problema de la mochila usando programación dinámica
resolver_mochila <- function(monedas, peso_maximo) {
  # Convertir las monedas en vectores de valor y peso
  valores <- monedas$VALOR_TOTAL
  pesos <- monedas$PESO_MEDIO
  
  # Crear la matriz de DP
  num_monedas <- length(valores)
  dp <- matrix(0, nrow = num_monedas + 1, ncol = peso_maximo + 1)
  
  # Rellenar la matriz DP
  for (i in 1:num_monedas) {
    for (w in 0:peso_maximo) {
      if (pesos[i] <= w) {
        dp[i + 1, w + 1] <- max(dp[i, w + 1], dp[i, w + 1 - pesos[i]] + valores[i])
      } else {
        dp[i + 1, w + 1] <- dp[i, w + 1]
      }
    }
  }
  
  # Recuperar la combinación óptima
  max_valor <- dp[num_monedas + 1, peso_maximo + 1]
  w <- peso_maximo
  seleccion <- rep(0, num_monedas)
  
  for (i in num_monedas:1) {
    if (dp[i + 1, w + 1] != dp[i, w + 1]) {
      seleccion[i] <- 1
      w <- w - pesos[i]
    }
  }
  
  # Devolver los resultados
  list(
    valor_total = max_valor,
    seleccion_monedas = monedas[seleccion == 1, ]
  )
}

# Definir el peso máximo
peso_maximo <- 1000

# Resolver el problema de la mochila
resultado_mochila <- resolver_mochila(monedas_simuladas, peso_maximo)

# Mostrar los resultados
print(paste("Valor total máximo:", resultado_mochila$valor_total))
print("Combinación óptima de monedas:")
print(resultado_mochila$seleccion_monedas)

```

```{r}
# Mostrar resumen de la combinación óptima
resumen_combinacion <- resultado_mochila$seleccion_monedas %>%
  group_by(DENOMINACION) %>%
  summarise(
    PESO_MEDIO = mean(PESO_MEDIO),
    VALOR_TOTAL = sum(VALOR_TOTAL),
    TOTAL_MONEDAS = n()
  )

print(resumen_combinacion)

```

# Done?



```{r}

```

